{"version":3,"file":"index.daa6a64a.js","sources":["../../vite/modulepreload-polyfill","../../src/components/Editor.tsx","../../src/components/OptionsMenu.tsx","../../src/store.ts","../../src/components/CodeResults.tsx","../../src/hooks/codeHooks.ts","../../src/hooks/useExecuteCodeWithMetaframe.ts","../../src/components/ButtonRun.tsx","../../src/components/ButtonHelp.tsx","../../src/App.tsx","../../src/index.tsx"],"sourcesContent":["const p = function polyfill() {\n    const relList = document.createElement('link').relList;\n    if (relList && relList.supports && relList.supports('modulepreload')) {\n        return;\n    }\n    for (const link of document.querySelectorAll('link[rel=\"modulepreload\"]')) {\n        processPreload(link);\n    }\n    new MutationObserver((mutations) => {\n        for (const mutation of mutations) {\n            if (mutation.type !== 'childList') {\n                continue;\n            }\n            for (const node of mutation.addedNodes) {\n                if (node.tagName === 'LINK' && node.rel === 'modulepreload')\n                    processPreload(node);\n            }\n        }\n    }).observe(document, { childList: true, subtree: true });\n    function getFetchOpts(script) {\n        const fetchOpts = {};\n        if (script.integrity)\n            fetchOpts.integrity = script.integrity;\n        if (script.referrerpolicy)\n            fetchOpts.referrerPolicy = script.referrerpolicy;\n        if (script.crossorigin === 'use-credentials')\n            fetchOpts.credentials = 'include';\n        else if (script.crossorigin === 'anonymous')\n            fetchOpts.credentials = 'omit';\n        else\n            fetchOpts.credentials = 'same-origin';\n        return fetchOpts;\n    }\n    function processPreload(link) {\n        if (link.ep)\n            // ep marker = processed\n            return;\n        link.ep = true;\n        // prepopulate the load record\n        const fetchOpts = getFetchOpts(link);\n        fetch(link.href, fetchOpts);\n    }\n};__VITE_IS_MODERN__&&p();","import { FunctionalComponent } from \"preact\";\nimport MonacoEditor from \"@monaco-editor/react\";\n\nexport type EditorProps = {\n  mode: string;\n  value: string | undefined;\n  setValue: (value: string | undefined) => void;\n  theme: string;\n};\n\nexport const Editor: FunctionalComponent<EditorProps> = ({\n  mode,\n  value,\n  setValue,\n  theme,\n}) => {\n  return (\n    <MonacoEditor\n      defaultLanguage={mode}\n      theme={theme}\n      options={{\n        minimap: { enabled: false },\n      }}\n      onChange={setValue}\n      value={value}\n      width=\"100%\"\n      // height=\"99vh\"\n      height=\"80vh\"\n    />\n  );\n};\n","import { FunctionalComponent } from \"preact\";\nimport { useCallback, useEffect, useState } from \"preact/hooks\";\nimport {\n  Box,\n  Drawer,\n  DrawerOverlay,\n  DrawerContent,\n  DrawerHeader,\n  DrawerBody,\n  Grid,\n  GridItem,\n  IconButton,\n  Input,\n  Select,\n  Switch,\n  Text,\n} from \"@chakra-ui/react\";\nimport { CheckIcon, CloseIcon, SettingsIcon } from \"@chakra-ui/icons\";\nimport { useHashParamJson } from \"@metapages/metaframe-hook\";\n\ntype OptionType = \"string\" | \"boolean\" | \"option\";\n\nexport type Option = {\n  name: string;\n  displayName: string;\n  default?: string | boolean;\n  type?: OptionType; // defaults to string\n  options?: string[];\n  validator?: (val: string | boolean) => string | undefined; // undefined == 👍, string is an error message\n  map?: (val: string | boolean) => any; // convert value to proper type\n};\n\nexport const OptionsMenuButton: FunctionalComponent<{ options: Option[] }> = ({\n  options,\n}) => {\n  const [open, setOpen] = useState<boolean>(false);\n\n  const onClick = useCallback(() => {\n    setOpen(!open);\n  }, [open]);\n\n  return (\n    <>\n      <IconButton\n        verticalAlign=\"top\"\n        aria-label=\"Metaframe settings\"\n        // @ts-ignore\n        icon={<SettingsIcon />}\n        // size=\"lg\"\n        onClick={onClick}\n      />\n      <OptionsMenu isOpen={open} setOpen={setOpen} options={options} />\n    </>\n  );\n};\n\ntype GenericOptions = Record<string, string | boolean>;\n\nconst OptionsMenu: FunctionalComponent<{\n  isOpen: boolean;\n  setOpen: (open: boolean) => void;\n  options: Option[];\n}> = ({ isOpen, setOpen, options }) => {\n  // isOpen = true; // for debugging/developing\n\n  const [optionsInHashParams, setOptionsInHashParams] =\n    useHashParamJson<GenericOptions>(\n      \"options\",\n      Object.fromEntries(\n        options\n          .filter((o) => o.default)\n          .map((option) => [option!.name!, option!.default!])\n      )\n    );\n\n  const [localOptions, setLocalOptions] = useState<GenericOptions>(\n    optionsInHashParams || {}\n  );\n  const [errors, setErrors] =\n    useState<Record<string, string> | undefined>(undefined);\n\n  const handleOnChange = useCallback(\n    (event: any) => {\n      const { name, value } = event.target as HTMLInputElement;\n      const option = options.find((o) => o.name === name) as Option; // assume we always find one since we configured it from options\n      if (option.type === \"boolean\") {\n        setLocalOptions({ ...localOptions, [name]: value === \"1\" });\n      } else {\n        setLocalOptions({ ...localOptions, [name]: value });\n      }\n    },\n    [localOptions, setLocalOptions]\n  );\n\n  const onClose = useCallback(() => {\n    setOpen(!isOpen);\n  }, [setOpen, isOpen]);\n\n  const onCloseAndAccept = useCallback(() => {\n    // first validate if available\n    const maybeErrors: Record<string, string> = {};\n    Object.keys(localOptions).forEach((key) => {\n      const option: Option | undefined = options.find((o) => o.name === key);\n      if (option && option.validator && option.type !== \"boolean\") {\n        const errorFromOption = option.validator(localOptions[key] as string);\n        if (errorFromOption) {\n          maybeErrors[key] = errorFromOption;\n        }\n      }\n    });\n    if (Object.keys(maybeErrors).length > 0) {\n      setErrors(maybeErrors);\n      return;\n    }\n    setErrors(undefined);\n\n    // assume valid!\n    // now maybe map to other values\n    const convertedOptions: GenericOptions = {};\n    Object.keys(localOptions).forEach((key) => {\n      const option: Option | undefined = options.find((o) => o.name === key);\n      if (option && option.map) {\n        convertedOptions[key] = option.map(localOptions[key]);\n      } else {\n        convertedOptions[key] = localOptions[key];\n      }\n    });\n\n    setOpen(!isOpen);\n    setOptionsInHashParams(convertedOptions);\n  }, [\n    setOpen,\n    isOpen,\n    options,\n    localOptions,\n    setOptionsInHashParams,\n    setErrors,\n  ]);\n\n  // preact complains in dev mode if this is moved out of a functional component\n  useEffect(() => {\n    const onKeyup = (e: KeyboardEvent) => {\n      if (e.key === \"Enter\" && isOpen) onCloseAndAccept();\n    };\n    window.addEventListener(\"keyup\", onKeyup);\n    return () => {\n      window.removeEventListener(\"keyup\", onKeyup);\n    };\n  }, [onCloseAndAccept, isOpen]);\n\n  return (\n    <Drawer placement=\"top\" onClose={onCloseAndAccept} isOpen={isOpen}>\n      <DrawerOverlay>\n        <DrawerContent>\n          <DrawerHeader borderBottomWidth=\"0px\">\n            Configure metaframe (stored in URL hash params )\n          </DrawerHeader>\n          <DrawerBody>\n            <Box\n              maxW=\"100%\"\n              p={2}\n              borderWidth=\"4px\"\n              borderRadius=\"lg\"\n              overflow=\"hidden\"\n            >\n              <Grid templateColumns=\"repeat(12, 1fr)\" gap={6}>\n                {options.map((option) => (\n                  <>\n                    <GridItem rowSpan={1} colSpan={4}>\n                      <Box\n                        w=\"100%\"\n                        h=\"100%\"\n                        display=\"flex\"\n                        alignItems=\"center\"\n                        justifyContent=\"flex-end\"\n                      >\n                        <Text textAlign={\"right\"} verticalAlign=\"bottom\">\n                          {option.displayName || option.name}:\n                        </Text>\n                      </Box>\n                    </GridItem>\n                    <GridItem rowSpan={1} colSpan={8}>\n                      {\" \"}\n                      {renderInput(\n                        option,\n                        localOptions[option.name],\n                        handleOnChange\n                      )}\n                    </GridItem>\n                  </>\n                ))}\n\n                <GridItem rowSpan={1} colSpan={12}></GridItem>\n                <GridItem rowSpan={1} colSpan={12}></GridItem>\n                <GridItem rowSpan={1} colSpan={12}></GridItem>\n                <GridItem rowSpan={1} colSpan={10}></GridItem>\n\n                <GridItem rowSpan={1} colSpan={1}>\n                  {/*\n                      // @ts-ignore */}\n                  <IconButton\n                    size=\"lg\"\n                    color=\"red\"\n                    icon={(<CloseIcon />) as any}\n                    onClick={onClose}\n                  />\n                </GridItem>\n\n                <GridItem rowSpan={1} colSpan={1}>\n                  {/*\n                      // @ts-ignore */}\n                  <IconButton\n                    size=\"lg\"\n                    color=\"green\"\n                    icon={(<CheckIcon />) as any}\n                    onClick={onCloseAndAccept}\n                  />\n                </GridItem>\n              </Grid>\n            </Box>\n          </DrawerBody>\n        </DrawerContent>\n      </DrawerOverlay>\n    </Drawer>\n  );\n};\n\nconst renderInput = (option: Option, value: any, onChange: any) => {\n  switch (option.type) {\n    case \"option\":\n      return (\n        <Select\n          name={option.name}\n          value={value}\n          onChange={onChange}\n          placeholder=\"Select option\"\n        >\n          {option.options!.map((optionChoice) => (\n            <option value={optionChoice}>{optionChoice}</option>\n          ))}\n        </Select>\n      );\n    case \"boolean\":\n      return (\n        <Switch\n          name={option.name}\n          // @ts-ignore\n          rightIcon={<CheckIcon />}\n          onChange={onChange}\n          isChecked={value === true || value === \"1\"}\n          value={value ? 0 : 1}\n        />\n      );\n    default:\n      return (\n        <Box w=\"100%\" h=\"10\">\n          <Input\n            name={option.name}\n            type=\"text\"\n            placeholder=\"\"\n            value={value}\n            onInput={onChange}\n          />\n        </Box>\n      );\n  }\n};\n","import create from \"zustand\";\nimport { CodeResult } from \"./hooks/codeHooks\";\n\nexport type MessagePayload = {\n  message: string;\n  type: \"error\" | \"warning\" | \"info\";\n  messages?: string[];\n};\n\nexport enum Mode {\n  Start,\n  Editing,\n  Running,\n  Finished,\n}\n\nexport type StoreState = {\n  code: string | undefined;\n  result: CodeResult<any> | undefined;\n  mode: Mode;\n  setCode: (code: string | undefined) => void;\n  setResult: (result: CodeResult<any> | undefined) => void;\n  setMode: (mode: Mode) => void;\n};\n\nexport const useStore = create<StoreState>((set) => ({\n  code: undefined,\n  result: undefined,\n  mode: Mode.Start,\n  setCode: (code: string | undefined) => set((state) => ({ code })),\n  setResult: (result: CodeResult<any> | undefined) =>\n    set((state) => ({ result })),\n  setMode: (mode: Mode) => set((state) => ({ mode })),\n}));\n","import { FunctionalComponent } from \"preact\";\nimport {\n  Alert,\n  AlertIcon,\n  AlertTitle,\n  AlertDescription,\n} from \"@chakra-ui/react\";\nimport { useStore, Mode } from \"../store\";\nimport { BeatLoader } from \"react-spinners\";\n\nexport const CodeResults: FunctionalComponent = () => {\n  const mode = useStore((state) => state.mode);\n  const result = useStore((state) => state.result);\n\n  if (Mode.Running === mode) {\n    return <BeatLoader size={8} color=\"blue\" />;\n  }\n  if (!result) {\n    return null;\n  }\n\n  if (result.failure) {\n    return (\n      <>\n        <Alert status=\"error\">\n          <AlertIcon />\n          <AlertTitle mr={2}>\n            Error\n            {result?.failure?.phase ? \" in phase \" + result.failure.phase : \"\"}\n          </AlertTitle>\n        </Alert>\n        <Alert status=\"error\">\n          <AlertIcon />\n          <AlertDescription>{`${result.failure?.error}`}</AlertDescription>\n        </Alert>\n      </>\n    );\n  } else {\n    return (\n      <Alert status=\"success\">\n        <AlertIcon />\n      </Alert>\n    );\n  }\n};\n","export interface CodeFailure {\n    error: any\n    phase?: string\n}\n\nexport interface CodeResult<R> {\n    failure?: CodeFailure;\n    // can be a cancel function\n    result?: R;\n}\n\nconst AsyncFunction = Object.getPrototypeOf(async function () { }).constructor\n\nexport const execJsCode = <R = any>(code: string, context: Record<string, any>): Promise<CodeResult<R>> => {\n    let exec = null\n    let args = Object.keys(context)\n    try {\n        // exec takes a single param 'exports', for which we provide an empty object.\n        // This is because whenever you import modules in the user-provided code, the TS compiler wants to\n        // define a magic property on the implicit `exports` variable to indicate the user code is also an ES module.\n        // It errors out if that implicit `exports` variable is undefined.\n        //\n        // The returned anonymous function takes a single param `context` which we provide at execution time.\n        // context is used to pass in the metaframe object\n        exec = AsyncFunction('exports', `\"use strict\"; return (async function(${args.join(', ')}){${code}})`)({}) // eslint-disable-line\n    } catch (e) {\n        return Promise.resolve({ failure: { error: e, phase: 'compile' } })\n    }\n\n    if (exec) {\n        var phase = 'exec'\n        let values = Object.values(context);\n        if (exec.apply) {\n            return exec.apply(null, values)\n            .then((r: any) => ({ result: r }))\n            .catch((e: any) => ({ failure: { error: e, phase } }))\n        } else {\n            return exec.then((a :typeof AsyncFunction) => {\n                return a.apply(null, values);\n            })\n            .then((r: any) => ({ result: r,  }))\n            .catch((e: any) => ({ failure: { error: e, phase } }))\n        }\n    }\n\n    return Promise.resolve({ failure: { error: 'compile failed', phase: 'compile' } })\n}\n","import { useCallback, useEffect } from \"preact/hooks\";\nimport { execJsCode } from \"../hooks/codeHooks\";\nimport { Mode, useStore } from \"../store\";\nimport { useMetaframe } from \"@metapages/metaframe-hook\";\nimport * as hashParamUtils from \"@metapages/metaframe-hook\";\nimport chroma from 'chroma-js';\n\n// Exports lazy code executor\nexport const useExecuteCodeWithMetaframe: () => [\n  (c: string | undefined) => Promise<void>,\n  any\n] = () => {\n  const metaframeObject = useMetaframe();\n  const setMode = useStore((state) => state.setMode);\n  const setResult = useStore((state) => state.setResult);\n  const result = useStore((state) => state.result);\n\n  // if new results, cancel existing running code\n  useEffect(() => {\n    return () => {\n      if (result?.result && typeof result?.result === \"function\") {\n        try {\n          result.result();\n        } catch (err) {\n          console.error(\"Failed to cancel without error:\", err);\n        }\n      }\n    };\n  }, [result]);\n\n  const execute = useCallback(\n    async (code: string | undefined) => {\n      if (!code || code.trim().length === 0) {\n        setMode(Mode.Finished);\n        setResult(undefined);\n        return;\n      }\n      if (!metaframeObject.metaframe) {\n        return;\n      }\n      setResult(undefined);\n      try {\n        const result = await execJsCode(code, {\n          metaframe: metaframeObject.metaframe,\n          chroma,\n          HASHTOOLS: hashParamUtils,\n        });\n        setResult(result);\n      } catch (err) {\n        console.error(err);\n        setResult({ failure: { error: err } });\n      }\n      setMode(Mode.Finished);\n    },\n    [metaframeObject.metaframe, setMode, setResult]\n  );\n\n  return [execute, result];\n};\n","import { FunctionalComponent } from \"preact\";\nimport { useCallback } from \"preact/hooks\";\nimport { IconButton } from \"@chakra-ui/react\";\nimport { EditIcon, CheckIcon } from \"@chakra-ui/icons\";\n\nimport {\n  MetaframeObject,\n  useMetaframe,\n  useHashParamBase64,\n} from \"@metapages/metaframe-hook\";\nimport { Mode, useStore } from \"../store\";\n\nexport const ButtonRun: FunctionalComponent = () => {\n  const metaframe: MetaframeObject = useMetaframe();\n  const mode = useStore((state) => state.mode);\n  const setMode = useStore((state) => state.setMode);\n  const codeInStore = useStore((state) => state.code);\n\n  // Split these next two otherwise editing is too slow as it copies to/from the URL\n  const [valueHashParam, setValueHashParam] = useHashParamBase64(\n    \"text\",\n    undefined\n  );\n\n  const onClick = useCallback(() => {\n    switch (mode) {\n      case Mode.Editing:\n        // If the values are different, update, this will trigger a new execution\n        if (valueHashParam !== codeInStore) {\n          setValueHashParam(codeInStore);\n        }\n        setMode(Mode.Running);\n        break;\n      case Mode.Finished:\n        setMode(Mode.Editing);\n        break;\n      case Mode.Running:\n        setMode(Mode.Editing);\n        break;\n      case Mode.Start:\n        break;\n    }\n  }, [\n    metaframe.metaframe,\n    codeInStore,\n    valueHashParam,\n    setValueHashParam,\n    mode,\n    setMode,\n  ]);\n\n  return (\n    <IconButton\n      verticalAlign=\"top\"\n      aria-label=\"Help\"\n      colorScheme={mode === Mode.Editing ? \"blue\" : undefined}\n      // @ts-ignore\n      icon={mode === Mode.Editing ? <CheckIcon /> : <EditIcon />}\n      size=\"md\"\n      onClick={onClick}\n      mr=\"4\"\n    />\n  );\n};\n","import { FunctionalComponent } from \"preact\";\nimport { useCallback, useState } from \"preact/hooks\";\nimport {\n  Drawer,\n  DrawerOverlay,\n  DrawerContent,\n  DrawerBody,\n  IconButton,\n  DrawerCloseButton,\n} from \"@chakra-ui/react\";\nimport { isIframe } from \"@metapages/metaframe-hook\";\nimport { QuestionIcon } from \"@chakra-ui/icons\";\n\nexport const ButtonHelp: FunctionalComponent<{ url?: string }> = ({ url }) => {\n  const [open, setOpen] = useState<boolean>(isIframe() ? false : true);\n\n  url = url\n    ? url\n    : `${window.location.origin}${window.location.pathname}/README.md`;\n\n  const onClick = useCallback(() => {\n    setOpen(!open);\n  }, [open]);\n\n  return (\n    <>\n      <IconButton\n        verticalAlign=\"top\"\n        aria-label=\"Help\"\n        // @ts-ignore\n        icon={<QuestionIcon />}\n        size=\"md\"\n        onClick={onClick}\n        mr=\"4\"\n      />\n      <HelpPanel url={url} isOpen={open} setOpen={setOpen} />\n    </>\n  );\n};\n\nconst HelpPanel: FunctionalComponent<{\n  url: string;\n  isOpen: boolean;\n  setOpen: (open: boolean) => void;\n}> = ({ isOpen, setOpen, url }) => {\n  const onClose = useCallback(() => {\n    setOpen(!isOpen);\n  }, [setOpen, isOpen]);\n\n  const onOverlayClick = useCallback(() => {\n    setOpen(false);\n  }, [setOpen]);\n\n  const iframeUrl = `https://metapages.github.io/metaframe-markdown/#?url=${url}`;\n\n  return (\n    <Drawer\n      size=\"full\"\n      placement=\"top\"\n      onClose={onClose}\n      isOpen={isOpen}\n      onOverlayClick={onOverlayClick}\n    >\n      <DrawerOverlay>\n        <DrawerContent>\n          <DrawerCloseButton size=\"lg\" bg=\"gray.100\" />\n          <DrawerBody>\n            <iframe width=\"100%\" height=\"100%\" src={iframeUrl} />\n          </DrawerBody>\n        </DrawerContent>\n      </DrawerOverlay>\n    </Drawer>\n  );\n};\n","/**\n * Simple:\n *  - any input sets\n *    - the content to the editor\n *    - the name to the input name\n *    - the save button is deactivated\n *  The save button sends the editor content to the same input name\n */\n\nimport { FunctionalComponent } from \"preact\";\nimport { useEffect } from \"preact/hooks\";\nimport { Box, Flex, Spacer, VStack } from \"@chakra-ui/react\";\nimport {\n  useHashParamJson,\n  useHashParamBase64,\n} from \"@metapages/metaframe-hook\";\nimport { Editor } from \"./components/Editor\";\nimport { Option, OptionsMenuButton } from \"./components/OptionsMenu\";\nimport { CodeResults } from \"./components/CodeResults\";\nimport { Mode, useStore } from \"./store\";\nimport { useExecuteCodeWithMetaframe } from \"./hooks/useExecuteCodeWithMetaframe\";\nimport { ButtonRun } from \"./components/ButtonRun\";\nimport { ButtonHelp } from \"./components/ButtonHelp\";\n\nconst appOptions: Option[] = [\n  {\n    name: \"theme\",\n    displayName: \"Light/Dark theme\",\n    default: \"light\",\n    type: \"option\",\n    options: [\"light\", \"vs-dark\"],\n  },\n];\n\ntype OptionBlob = {\n  theme: string;\n};\n\nexport const App: FunctionalComponent = () => {\n  // metaframe configuration\n  const [options] = useHashParamJson<OptionBlob>(\"options\", {\n    theme: \"light\",\n  });\n  const codeInStore = useStore((state) => state.code);\n  const setCodeInStore = useStore((state) => state.setCode);\n  const mode = useStore((state) => state.mode);\n  const setMode = useStore((state) => state.setMode);\n  const [runCode] = useExecuteCodeWithMetaframe();\n\n  // Split these next two otherwise editing is too slow as it copies to/from the URL\n  const [valueHashParam] = useHashParamBase64(\"text\", undefined);\n\n  // If state === Mode.Start, transition to Mode.Running.\n  // If there is no code, it's a no-op\n  useEffect(() => {\n    if (mode === Mode.Start) {\n      setMode(Mode.Running);\n    }\n  }, [mode, setMode]);\n\n  // If state === Mode.Running, exec the code\n  useEffect(() => {\n    if (mode !== Mode.Running) {\n      return;\n    }\n\n    // The code values are the same, but the user clicked the button, so execute\n    if (runCode) {\n      runCode(codeInStore);\n    }\n  }, [mode, codeInStore, runCode]);\n\n  // source of truth: the URL param #?text=<HashParamBase64>\n  // if that changes, set the local value\n  // the local value changes fast from editing\n  useEffect(() => {\n    setCodeInStore(valueHashParam);\n    if (runCode) {\n      runCode(valueHashParam);\n    }\n  }, [valueHashParam, setCodeInStore, runCode]);\n\n  const menu = (\n    <VStack spacing={2} alignItems=\"flex-start\">\n      <Flex width=\"100%\">\n        <ButtonRun />\n        <Spacer />\n        <ButtonHelp />\n        <OptionsMenuButton options={appOptions} />\n      </Flex>\n      <CodeResults />\n    </VStack>\n  );\n\n  return (\n    <Box w=\"100%\" p={2}>\n      <VStack spacing={2} alignItems=\"flex-start\">\n        {mode === Mode.Editing ? (\n          <Box w=\"100%\">\n            <Editor\n              mode=\"javascript\"\n              theme={options?.theme || \"light\"}\n              setValue={setCodeInStore}\n              value={codeInStore}\n            />\n          </Box>\n        ) : (\n          <div id=\"render\" />\n        )}\n\n        <Box w=\"30%\">{menu}</Box>\n      </VStack>\n    </Box>\n  );\n};\n","import { render } from \"preact\";\nimport { WithMetaframe } from \"@metapages/metaframe-hook\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport { App } from \"./App\";\n\nrender(\n  <ChakraProvider>\n    <WithMetaframe>\n      <App />\n    </WithMetaframe>\n  </ChakraProvider>,\n  document.getElementById(\"root\")!\n);\n"],"names":["MonacoEditor","useState","useCallback","useHashParamJson","DrawerOverlay","DrawerHeader","DrawerBody","BeatLoader","useMetaframe","useHashParamBase64","isIframe","DrawerCloseButton","render","WithMetaframe"],"mappings":"uVAAA,KAAM,IAAI,UAAoB,CAC1B,KAAM,GAAU,SAAS,cAAc,QAAQ,QAC/C,GAAI,GAAW,EAAQ,UAAY,EAAQ,SAAS,iBAChD,OAEJ,SAAW,KAAQ,UAAS,iBAAiB,6BACzC,EAAe,GAEnB,GAAI,kBAAiB,AAAC,GAAc,CAChC,SAAW,KAAY,GACnB,GAAI,EAAS,OAAS,YAGtB,SAAW,KAAQ,GAAS,WACxB,AAAI,EAAK,UAAY,QAAU,EAAK,MAAQ,iBACxC,EAAe,KAG5B,QAAQ,SAAU,CAAE,UAAW,GAAM,QAAS,KACjD,WAAsB,EAAQ,CAC1B,KAAM,GAAY,GAClB,MAAI,GAAO,WACP,GAAU,UAAY,EAAO,WAC7B,EAAO,gBACP,GAAU,eAAiB,EAAO,gBACtC,AAAI,EAAO,cAAgB,kBACvB,EAAU,YAAc,UACvB,AAAI,EAAO,cAAgB,YAC5B,EAAU,YAAc,OAExB,EAAU,YAAc,cACrB,EAEX,WAAwB,EAAM,CAC1B,GAAI,EAAK,GAEL,OACJ,EAAK,GAAK,GAEV,KAAM,GAAY,EAAa,GAC/B,MAAM,EAAK,KAAM,KAEvB,AAAoB,UChCT,IAA2C,CAAC,CACvD,OACA,QACA,WACA,aAGGA,EAAD,CACE,gBAAiB,EACjB,QACA,QAAS,CACP,QAAS,CAAE,QAAS,KAEtB,SAAU,EACV,QACA,MAAM,OAEN,OAAO,SCKA,GAAgE,CAAC,CAC5E,aACI,MACE,CAAC,EAAM,GAAWC,EAAkB,IAEpC,EAAUC,EAAY,IAAM,GACxB,CAAC,IACR,CAAC,sBAIC,EAAD,CACE,cAAc,MACd,aAAW,qBAEX,OAAO,EAAD,MAEN,cAED,GAAD,CAAa,OAAQ,EAAM,UAAkB,cAO7C,GAID,CAAC,CAAE,SAAQ,UAAS,aAAc,MAG/B,CAAC,EAAqB,GAC1BC,EACE,UACA,OAAO,YACL,EACG,OAAO,AAAC,GAAM,EAAE,SAChB,IAAI,AAAC,GAAW,CAAC,EAAQ,KAAO,EAAQ,YAI3C,CAAC,EAAc,GAAmBF,EACtC,GAAuB,IAEnB,CAAC,EAAQ,GACbA,EAA6C,QAEzC,EAAiBC,EACrB,AAAC,GAAe,MACR,CAAE,OAAM,SAAU,EAAM,OAE1B,AADW,EAAQ,KAAK,AAAC,GAAM,EAAE,OAAS,GACnC,OAAS,YACF,IAAK,GAAe,GAAO,IAAU,QAErC,IAAK,GAAe,GAAO,KAG/C,CAAC,EAAc,IAGX,EAAUA,EAAY,IAAM,GACxB,CAAC,IACR,CAAC,EAAS,IAEP,EAAmBA,EAAY,IAAM,MAEnC,GAAsC,aACrC,KAAK,GAAc,QAAQ,AAAC,GAAQ,MACnC,GAA6B,EAAQ,KAAK,AAAC,GAAM,EAAE,OAAS,MAC9D,GAAU,EAAO,WAAa,EAAO,OAAS,UAAW,MACrD,GAAkB,EAAO,UAAU,EAAa,IAClD,MACU,GAAO,MAIrB,OAAO,KAAK,GAAa,OAAS,EAAG,GAC7B,YAGF,aAIJ,GAAmC,UAClC,KAAK,GAAc,QAAQ,AAAC,GAAQ,MACnC,GAA6B,EAAQ,KAAK,AAAC,GAAM,EAAE,OAAS,GAC9D,GAAU,EAAO,MACF,GAAO,EAAO,IAAI,EAAa,MAE/B,GAAO,EAAa,OAIjC,CAAC,KACc,IACtB,CACD,EACA,EACA,EACA,EACA,EACA,aAIQ,IAAM,MACR,GAAU,AAAC,GAAqB,CAChC,EAAE,MAAQ,SAAW,sBAEpB,iBAAiB,QAAS,GAC1B,IAAM,QACJ,oBAAoB,QAAS,KAErC,CAAC,EAAkB,MAGnB,EAAD,CAAQ,UAAU,MAAM,QAAS,EAAkB,YAChDE,EAAD,OACG,EAAD,OACGC,EAAD,CAAc,kBAAkB,OAAM,sDAGrCC,EAAD,OACG,EAAD,CACE,KAAK,OACL,EAAG,EACH,YAAY,MACZ,aAAa,KACb,SAAS,YAER,EAAD,CAAM,gBAAgB,kBAAkB,IAAK,GAC1C,EAAQ,IAAI,AAAC,cAET,EAAD,CAAU,QAAS,EAAG,QAAS,KAC5B,EAAD,CACE,EAAE,OACF,EAAE,OACF,QAAQ,OACR,WAAW,SACX,eAAe,cAEd,EAAD,CAAM,UAAW,QAAS,cAAc,UACrC,EAAO,aAAe,EAAO,KAAK,SAIxC,EAAD,CAAU,QAAS,EAAG,QAAS,GAC5B,IACA,GACC,EACA,EAAa,EAAO,MACpB,QAMP,EAAD,CAAU,QAAS,EAAG,QAAS,OAC9B,EAAD,CAAU,QAAS,EAAG,QAAS,OAC9B,EAAD,CAAU,QAAS,EAAG,QAAS,OAC9B,EAAD,CAAU,QAAS,EAAG,QAAS,OAE9B,EAAD,CAAU,QAAS,EAAG,QAAS,KAG5B,EAAD,CACE,KAAK,KACL,MAAM,MACN,OAAQ,EAAD,MACP,QAAS,OAIZ,EAAD,CAAU,QAAS,EAAG,QAAS,KAG5B,EAAD,CACE,KAAK,KACL,MAAM,QACN,OAAQ,EAAD,MACP,QAAS,YAYvB,GAAc,CAAC,EAAgB,EAAY,IAAkB,QACzD,EAAO,UACR,kBAEA,EAAD,CACE,KAAM,EAAO,KACb,QACA,WACA,YAAY,iBAEX,EAAO,QAAS,IAAI,AAAC,KACnB,SAAD,CAAQ,MAAO,GAAe,SAIjC,mBAEA,EAAD,CACE,KAAM,EAAO,KAEb,YAAY,EAAD,MACX,WACA,UAAW,IAAU,IAAQ,IAAU,IACvC,MAAO,EAAQ,EAAI,qBAKpB,EAAD,CAAK,EAAE,OAAO,EAAE,QACb,EAAD,CACE,KAAM,EAAO,KACb,KAAK,OACL,YAAY,GACZ,QACA,QAAS,UC5PT,GAAL,UAAK,EAAL,qGAAK,gBAgBC,GAAW,EAAmB,AAAC,KAC1C,KAAM,OACN,OAAQ,OACR,KAAM,EACN,QAAS,AAAC,GAA6B,EAAI,AAAC,KAAa,UACzD,UAAW,AAAC,GACV,EAAI,AAAC,KAAa,YACpB,QAAS,AAAC,GAAe,EAAI,AAAC,KAAa,aCtBhC,GAAmC,IAAM,MAC9C,GAAO,EAAS,AAAC,GAAU,EAAM,MACjC,EAAS,EAAS,AAAC,GAAU,EAAM,cAErC,GAAK,UAAY,IACXC,aAAD,CAAY,KAAM,EAAG,MAAM,SAE/B,EAID,EAAO,mBAGJ,EAAD,CAAO,OAAO,WACX,EAAD,QACC,EAAD,CAAY,GAAI,GAAG,QAEhB,GAAQ,SAAS,MAAQ,aAAe,EAAO,QAAQ,MAAQ,OAGnE,EAAD,CAAO,OAAO,WACX,EAAD,QACC,EAAD,KAAmB,GAAG,EAAO,SAAS,aAMzC,EAAD,CAAO,OAAO,aACX,EAAD,OAtBG,MCPL,GAAgB,OAAO,eAAe,gBAAkB,IAAK,YAEtD,GAAa,CAAU,EAAc,IAAyD,IACnG,GAAO,KACP,EAAO,OAAO,KAAK,MACnB,GAQO,GAAc,UAAW,wCAAwC,EAAK,KAAK,UAAU,OAAU,UACjG,SACE,SAAQ,QAAQ,CAAE,QAAS,CAAE,MAAO,EAAG,MAAO,gBAGrD,EAAM,IACF,GAAQ,UACR,GAAS,OAAO,OAAO,SACvB,GAAK,MACE,EAAK,MAAM,KAAM,GACvB,KAAK,AAAC,KAAc,OAAQ,KAC5B,MAAM,AAAC,KAAc,QAAS,CAAE,MAAO,EAAG,YAEpC,EAAK,KAAK,AAAC,GACP,EAAE,MAAM,KAAM,IAExB,KAAK,AAAC,KAAc,OAAQ,KAC5B,MAAM,AAAC,KAAc,QAAS,CAAE,MAAO,EAAG,kBAI5C,SAAQ,QAAQ,CAAE,QAAS,CAAE,MAAO,iBAAkB,MAAO,cCrC3D,GAGT,IAAM,MACF,GAAkBC,IAClB,EAAU,EAAS,AAAC,GAAU,EAAM,SACpC,EAAY,EAAS,AAAC,GAAU,EAAM,WACtC,EAAS,EAAS,AAAC,GAAU,EAAM,iBAG/B,IACD,IAAM,IACP,GAAQ,QAAU,MAAO,IAAQ,QAAW,cAC1C,GACK,eACA,WACC,MAAM,kCAAmC,KAItD,CAAC,IA6BG,CA3BSN,EACd,KAAO,IAA6B,IAC9B,CAAC,GAAQ,EAAK,OAAO,SAAW,EAAG,GAC7B,EAAK,YACH,kBAGR,EAAC,EAAgB,aAGX,WACN,MACI,GAAS,KAAM,IAAW,EAAM,CACpC,UAAW,EAAgB,UAC3B,SACA,UAAW,MAEH,SACH,WACC,MAAM,KACJ,CAAE,QAAS,CAAE,MAAO,OAExB,EAAK,YAEf,CAAC,EAAgB,UAAW,EAAS,IAGtB,IC7CN,GAAiC,IAAM,MAC5C,GAA6BM,IAC7B,EAAO,EAAS,AAAC,GAAU,EAAM,MACjC,EAAU,EAAS,AAAC,GAAU,EAAM,SACpC,EAAc,EAAS,AAAC,GAAU,EAAM,MAGxC,CAAC,EAAgB,GAAqBC,EAC1C,OACA,QAGI,EAAUP,EAAY,IAAM,QACxB,OACD,GAAK,QAEJ,IAAmB,KACH,KAEZ,EAAK,mBAEV,GAAK,WACA,EAAK,mBAEV,GAAK,UACA,EAAK,mBAEV,GAAK,cAGX,CACD,EAAU,UACV,EACA,EACA,EACA,EACA,aAIC,EAAD,CACE,cAAc,MACd,aAAW,OACX,YAAa,IAAS,EAAK,QAAU,OAAS,OAE9C,KAAM,IAAS,EAAK,UAAW,EAAD,QAAiB,EAAD,MAC9C,KAAK,KACL,UACA,GAAG,OC/CI,GAAoD,CAAC,CAAE,SAAU,MACtE,CAAC,EAAM,GAAWD,EAAkBS,SAEpC,GAEF,GAAG,OAAO,SAAS,SAAS,OAAO,SAAS,0BAE1C,GAAUR,EAAY,IAAM,GACxB,CAAC,IACR,CAAC,sBAIC,EAAD,CACE,cAAc,MACd,aAAW,OAEX,OAAO,GAAD,MACN,KAAK,KACL,UACA,GAAG,QAEJ,GAAD,CAAW,MAAU,OAAQ,EAAM,cAKnC,GAID,CAAC,CAAE,SAAQ,UAAS,SAAU,MAC3B,GAAUA,EAAY,IAAM,GACxB,CAAC,IACR,CAAC,EAAS,IAEP,EAAiBA,EAAY,IAAM,GAC/B,KACP,CAAC,IAEE,EAAY,wDAAwD,aAGvE,EAAD,CACE,KAAK,OACL,UAAU,MACV,UACA,SACA,oBAECE,EAAD,OACG,EAAD,OACGO,GAAD,CAAmB,KAAK,KAAK,GAAG,eAC/BL,EAAD,OACG,SAAD,CAAQ,MAAM,OAAO,OAAO,OAAO,IAAK,SC3C9C,GAAuB,CAC3B,CACE,KAAM,QACN,YAAa,mBACb,QAAS,QACT,KAAM,SACN,QAAS,CAAC,QAAS,aAQV,GAA2B,IAAM,MAEtC,CAAC,GAAWH,EAA6B,UAAW,CACxD,MAAO,UAEH,EAAc,EAAS,AAAC,GAAU,EAAM,MACxC,EAAiB,EAAS,AAAC,GAAU,EAAM,SAC3C,EAAO,EAAS,AAAC,GAAU,EAAM,MACjC,EAAU,EAAS,AAAC,GAAU,EAAM,SACpC,CAAC,GAAW,KAGZ,CAAC,GAAkBM,EAAmB,OAAQ,UAI1C,IAAM,CACV,IAAS,EAAK,SACR,EAAK,UAEd,CAAC,EAAM,MAGA,IAAM,CACV,IAAS,EAAK,SAKd,KACM,IAET,CAAC,EAAM,EAAa,MAKb,IAAM,GACC,GACX,KACM,IAET,CAAC,EAAgB,EAAgB,SAE9B,KACH,EAAD,CAAQ,QAAS,EAAG,WAAW,gBAC5B,GAAD,CAAM,MAAM,UACT,GAAD,QACC,GAAD,QACC,GAAD,QACC,GAAD,CAAmB,QAAS,QAE7B,GAAD,gBAKD,EAAD,CAAK,EAAE,OAAO,EAAG,KACd,EAAD,CAAQ,QAAS,EAAG,WAAW,cAC5B,IAAS,EAAK,UACZ,EAAD,CAAK,EAAE,UACJ,GAAD,CACE,KAAK,aACL,MAAO,GAAS,OAAS,QACzB,SAAU,EACV,MAAO,OAIV,MAAD,CAAK,GAAG,aAGT,EAAD,CAAK,EAAE,OAAO,MCzGtBG,KACG,GAAD,OACGC,GAAD,OACG,GAAD,QAGJ,SAAS,eAAe"}